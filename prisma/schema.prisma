// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// datasource db {
//     provider = "postgresql"
//     // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//     // Further reading:
//     // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//     // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//     url      = env("DATABASE_URL")

// }
datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_PRISMA_URL") // uses connection pooling
    directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    messages Message[]

    posts          Post[]
    channelMembers ChannelMembers[]
    userRoles      UserRoles[]
    votes          Vote[]
}

model Role {
    id String @id @default(uuid())

    name        String
    channelId   String
    channel     Channel     @relation(fields: [channelId], references: [id])
    permissions String[] // e.g., ["READ_MESSAGES", "SEND_MESSAGES"]
    createdAt   DateTime    @default(now())
    UserRoles   UserRoles[]
}

model Post {
    id          String   @id @default(uuid())
    name        String
    fileUrl     String?
    points      Int      @default(0)
    content     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    channelsId  String
    createdById String

    channels  Channel   @relation(fields: [channelsId], references: [id])
    createdBy User      @relation(fields: [createdById], references: [id])
    messages  Message[]
    votes     Vote[]

    @@index([name])
}

model Vote {
    id        String   @id @default(uuid())
    value     Int
    userId    String
    postId    String?
    messageId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    post    Post?    @relation(fields: [postId], references: [id])
    user    User     @relation(fields: [userId], references: [id])
    message Message? @relation(fields: [messageId], references: [id])

    @@unique([userId, postId])
    @@unique([userId, messageId])
}

model Channel {
    id    String  @id @default(uuid())
    name  String
    image String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    posts   Post[]
    roles   Role[]
    members ChannelMembers[]
}

model Message {
    id      String  @id @default(uuid())
    content String
    points  Int     @default(0)
    fileUrl String?

    createdById String
    postId      String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    post  Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    user  User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    votes Vote[]
}

model ChannelMembers {
    id        String @id @default(uuid())
    userId    String
    channelId String

    user    User    @relation(fields: [userId], references: [id])
    channel Channel @relation(fields: [channelId], references: [id])

    @@unique([userId, channelId])
}

// Many-to-many relation between User and Role
model UserRoles {
    userId String
    roleId String
    role   Role   @relation(fields: [roleId], references: [id])
    user   User   @relation(fields: [userId], references: [id])

    @@unique([userId, roleId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
